export class MorseCode {
  static toMorseCode(inputData: string): string {
    let returnValue = inputData.replace(/[0-9]/g, function(char) {
        return String.fromCharCode(char.charCodeAt(0) + 0xFEE0)
      })

    let kanaMap = {
      'ガ': '・－・・　・・　', 'ギ': '－・－・・　・・　', 'グ': '・・・－　・・　', 'ゲ': '－・－－　・・　', 'ゴ': '－－－－　・・　',
      'ザ': '－・－・－　・・　', 'ジ': '－－・－・　・・　', 'ズ': '－－－・－　・・　', 'ゼ': '・－－－・　・・　', 'ゾ': '－－－・　・・　',
      'ダ': '－・　・・　', 'ヂ': '・・－・　・・　', 'ヅ': '・－－・　・・　', 'デ': '・－・－－　・・　', 'ド': '・・－・・　・・　',
      'バ': '－・・・　・・　', 'ビ': '－－・・－　・・　', 'ブ': '－－・・　・・　', 'ベ': '・　・・　', 'ボ': '－・・　・・　',
      'パ': '－・・・　・・－－・　', 'ピ': '－－・・－　・・－－・　', 'プ': '－－・・　・・－－・　', 'ペ': '・　・・－－・　', 'ポ': '－・・　・・－－・　',

      'ア': '－－・－－　', 'イ': '・－　', 'ウ': '・・－　', 'エ': '－・－－－　', 'オ': '・－・・・　',
      'カ': '・－・・　', 'キ': '－・－・・　', 'ク': '・・・－　', 'ケ': '－・－－　', 'コ': '－－－－　',
      'サ': '－・－・－　', 'シ': '－－・－・　', 'ス': '－－－・－　', 'セ': '・－－－・　', 'ソ': '－－－・　',
      'タ': '－・　', 'チ': '・・－・　', 'ツ': '・－－・　', 'テ': '・－・－－　', 'ト': '・・－・・　',
      'ナ': '・－・　', 'ニ': '－・－・　', 'ヌ': '・・・・　', 'ネ': '－－・－　', 'ノ': '・・－－　',
      'ハ': '－・・・　', 'ヒ': '－－・・－　', 'フ': '－－・・　', 'ヘ': '・　', 'ホ': '－・・　',
      'マ': '－・・－　', 'ミ': '・・－・－　', 'ム': '－　', 'メ': '－・・・－　', 'モ': '－・・－・　',
      'ヤ': '・－－　', 'ユ': '－・・－－　', 'ヨ': '－－　',
      'ラ': '・・・　', 'リ': '－－・　', 'ル': '－・－－・　', 'レ': '－－－　', 'ロ': '・－・－　',
      'ワ': '－・－　', 'ヲ': '・－－－　', 'ン': '・－・－・　',
      // 'ァ': 'ｧ', 'ィ': 'ｨ', 'ゥ': 'ｩ', 'ェ': 'ｪ', 'ォ': 'ｫ',
      // 'ッ': 'ｯ',
      // 'ャ': 'ﾔ', 'ュ': 'ﾕ', 'ョ': 'ｮ',
      // 'ー': 'ｰ',
      'ヰ': '・－・・－　', 'ヱ': '・－－・・ '
    }

    let reg = new RegExp('(' + Object.keys(kanaMap).join('|') + ')', 'g')
    return returnValue.replace(reg, function(kana) {
      const key = kana
      return kanaMap[key]
    })
  }

  static toKatakana(inputData: string): string {
    let returnValue = inputData.replace(/[０-９]/g, function(char) {
        return String.fromCharCode(char.charCodeAt(0) - 0xFEE0)
      })

    let kanaMap = {
      'ガ': 'ｶﾞ', 'ギ': 'ｷﾞ', 'グ': 'ｸﾞ', 'ゲ': 'ｹﾞ', 'ゴ': 'ｺﾞ',
      'ザ': 'ｻﾞ', 'ジ': 'ｼﾞ', 'ズ': 'ｽﾞ', 'ゼ': 'ｾﾞ', 'ゾ': 'ｿﾞ',
      'ダ': 'ﾀﾞ', 'ヂ': 'ﾁﾞ', 'ヅ': 'ﾂﾞ', 'デ': 'ﾃﾞ', 'ド': 'ﾄﾞ',
      'バ': 'ﾊﾞ', 'ビ': 'ﾋﾞ', 'ブ': 'ﾌﾞ', 'ベ': 'ﾍﾞ', 'ボ': 'ﾎﾞ',
      'パ': 'ﾊﾟ', 'ピ': 'ﾋﾟ', 'プ': 'ﾌﾟ', 'ペ': 'ﾍﾟ', 'ポ': 'ﾎﾟ',

      'ア': 'ｱ', 'イ': 'ｲ', 'ウ': 'ｳ', 'エ': 'ｴ', 'オ': 'ｵ',
      'カ': 'ｶ', 'キ': 'ｷ', 'ク': 'ｸ', 'ケ': 'ｹ', 'コ': 'ｺ',
      'サ': 'ｻ', 'シ': 'ｼ', 'ス': 'ｽ', 'セ': 'ｾ', 'ソ': 'ｿ',
      'タ': 'ﾀ', 'チ': 'ﾁ', 'ツ': 'ﾂ', 'テ': 'ﾃ', 'ト': 'ﾄ',
      'ナ': 'ﾅ', 'ニ': 'ﾆ', 'ヌ': 'ﾇ', 'ネ': 'ﾈ', 'ノ': 'ﾉ',
      'ハ': 'ﾊ', 'ヒ': 'ﾋ', 'フ': 'ﾌ', 'ヘ': 'ﾍ', 'ホ': 'ﾎ',
      'マ': 'ﾏ', 'ミ': 'ﾐ', 'ム': 'ﾑ', 'メ': 'ﾒ', 'モ': 'ﾓ',
      'ヤ': 'ﾔ', 'ユ': 'ﾕ', 'ヨ': 'ﾖ',
      'ラ': 'ﾗ', 'リ': 'ﾘ', 'ル': 'ﾙ', 'レ': 'ﾚ', 'ロ': 'ﾛ',
      'ワ': 'ﾜ', 'ヲ': 'ｦ', 'ン': 'ﾝ',
      'ァ': 'ｧ', 'ィ': 'ｨ', 'ゥ': 'ｩ', 'ェ': 'ｪ', 'ォ': 'ｫ',
      'ッ': 'ｯ',
      'ャ': 'ﾔ', 'ュ': 'ﾕ', 'ョ': 'ｮ',
      'ー': 'ｰ'
    }

    let reg = new RegExp('(' + Object.keys(kanaMap).join('|') + ')', 'g')
    return returnValue.replace(reg, function(kana) {
      const key = kana
      return kanaMap[key]
    })
  }
}
